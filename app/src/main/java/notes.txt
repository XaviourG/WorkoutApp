Regarding the database, we need to track:
* Exercise performance
* workout history
*etc

The approach will be a db of exercises sub dbs. Each exercise sub db will maintain performance
 logs sorted by date, these logs will contain weight and reps.
 Workouts will be recorded as ordered lists of references to said performance logs.
 Logs will be set agnostic, as in 4 sets of bench will be recorded as four individual logs.

 We also need the workout templates and programs


 Nah nah nah, 1 db, 3 entity types: Exercises, Workouts, & Logs(Sets), oh and program

 Exercise
 - id
 - Name
 - Prime Mover
 - Equipment

 Workout (templates not logs)
 - id
 - title
 - array of exercises as strings (encoded strings - exerciseID|sets|reps|modifier)
 - notes

 Log
 - id
 - date (need to create type converter for this)
 - exercise
 - modifier
 - load
 - reps performed



Dbugging to come back to later:

- Using exercises just created to save a workout results in a number format exception


Stuff to add
- superset functionality
- add load and rep support for workout building DONE
- change log figures from ints to floats for negatives and decimals


IMAGE SHIFTS FOR MABLE BUTTONS
+10 RED
-26 YELLOW
BRIGHTNESS + 1
CONTRAST + 3

Superset Ideation?
- matching sidebar across exercises
- matching background across sets
- Arrow with 'superset' wirtten on it stretching from first title to second, then continuing to last set
How do we set a superset?
- A superset menu button on the bottom
- part of the set type menu -> that leads to another meny asking superset with above or below?
- adds superset line, adds superset above or below to workout?


STUFF TO DO
[X] - get log highlighting fixed in player
[X] - add timer to workout player
[X] - differentiate between kg and lbs
[X] - Workout editor, exercise order shifting
[X] - implement dropsets,
[-] - implement rest pause,
[-] - implement myo.
[ ] - implement supersets,
[ ] - exercise notes
[ ] - Workout Finished Screen
[ ] - asthetic up rest of app
[ ] - Progress graphing functionality